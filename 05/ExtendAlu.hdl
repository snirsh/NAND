/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
        ShiftLeft(in=x,out=lsx);
		ShiftRight(in=x,out=rsx);
		ShiftLeft(in=y,out=lsy);
		ShiftRight(in=y,out=rsy);
		Mux4Way16(a=rsy,b=rsx,c=lsy,d=lsx,sel=instruction[4..5],out=sout);
		Mul(a=x,b=y,out=prod);		
		ALU(x=x,y=y,zx=instruction[5],nx=instruction[4],zy=instruction[3],ny=instruction[2],f=instruction[1],no=instruction[0],out=ALUOUT,out=outM,zr=zrALU,ng=ngALU);
		Mux4Way16(a=prod,b=sout,c=prod,d=ALUOUT,sel=instruction[7..8],out[15]=ng,out[0..7]=or1,out[8..15]=or2,out=out);
		Or8Way(in=or1,out=out1);
		Or8Way(in=or2,in[7]=false,out=out2);
		Or(a=out1,b=out2,out=notzr);
		Not(in=notzr,out=zr);
}
