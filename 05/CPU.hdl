// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	// this is the instruction handling, first mux and the ARegister
	Not(in=instruction[15],out=nInst);
	Mux16(a=ALUOUT,b=instruction,sel=nInst,out=inA);
	Or(a=nInst,b=instruction[5],out=LoadA);
	ARegister(in=inA,load=LoadA,out=AregOut,out[0..14]=addressM);
	// here we ended with the first mux and assumably load the second mux which is before the ALU
	And(a=instruction[15],b=instruction[12],out=MuxLoad);
	Mux16(a=AregOut,b=inM,sel=MuxLoad,out=MUXALUIn);
	// Loading the ALU	
	ALU(x=DregOut,y=MUXALUIn,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOUT,out=outM,zr=zrALU,ng=ngALU);
	// this is the DRegister loading
	And(a=instruction[15],b=instruction[4],out=LoadD);
	DRegister(in=ALUOUT,load=LoadD,out=DregOut);
	// dealing with writeM output
	And(a=instruction[15],b=instruction[3],out=writeM);
	// dealing with jumps and pc
	Not(in=ngALU,out=posALU);
	Not(in=zrALU,out=notzr);
	And(a=instruction[15],b=instruction[0],out=JGT);
	And(a=posALU,b=notzr,out=defpos);
	And(a=JGT,b=defpos,out=o1);
	And(a=instruction[15],b=instruction[1],out=JEQ);
	And(a=JEQ,b=zrALU,out=o2);
	And(a=instruction[15],b=instruction[2],out=JLT);
	And(a=JLT,b=ngALU,out=o3);
	Or(a=o1,b=o2,out=o4);
	Or(a=o3,b=o4,out=LoadPC);
	PC(in=AregOut,load=LoadPC,inc=true,reset=reset,out[0..14]=pc);	
}