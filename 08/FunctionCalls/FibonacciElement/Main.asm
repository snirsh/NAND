@13
M=0
@14
M=0
@15
M=0
@256
D=A
@SP
M=D
@Sys.init1
D=A
@SP
A=M
M=D
@SP
M=M+1
@this
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@that
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@argument
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@local
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
M=M+1
//PUSHING: constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@SP
A=M-1
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init1)
@13
M=0
@14
M=0
@15
M=0
(Main.fibonacci)
//PUSHING: argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//PUSHING: constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//COMP OP:lt
//CHECKING FOR OVERFLOW ON CMD
@SP
AM=M-1
D=M
@R14
M=D
@FNEG.Main222
D;JLT
@SP
A=M-1
D=M
@SNEG.Main222
D;JLT
@CHCK.Main222
0;JMP
(FNEG.Main222)
@SP
A=M-1
D=M
@SPOS.Main222
D;JGT
@CHCK.Main222
0;JMP
(SPOS.Main222)
@R2
D=A
@ANS.Main222
0;JMP
(SNEG.Main222)
@R2
D=-A
@ANS.Main222
0;JMP
(CHCK.Main222)
@R14
D=D-M
(ANS.Main222)
@IF.Main222
D;JLT
@SP
A=M-1
M=0
@ELSE.Main222
0;JMP
(IF.Main222)
@SP
A=M-1
M=-1
(ELSE.Main222)
@SP
A=M-1
D=M
@SP
M=A
D=M
(IF_TRUE)
D;JNE
@IF_FALSE
0;JMP
(IF_TRUE)
//PUSHING: argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@R14
M=D
@5
D=D-A
A=D
D=M
@R15
M=D
//POPPING: argument 0
@0
D=A
@ARG
A=M+D
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
M=M-1
A=M
D=M
@this
M=D
@R14
M=M-1
A=M
D=M
@that
M=D
@R14
M=M-1
A=M
D=M
@argument
M=D
@R14
M=M-1
A=M
D=M
@local
M=D
@R15
A=M
0;JMP
(IF_FALSE)
//PUSHING: argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//PUSHING: constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@Main.fibonacci3
D=A
@SP
A=M
M=D
@SP
M=M+1
@this
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@that
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@argument
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@local
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
M=M+1
//PUSHING: constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@SP
A=M-1
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci3)
//PUSHING: argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
M=M+1
A=M-1
M=D
//PUSHING: constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@Main.fibonacci4
D=A
@SP
A=M
M=D
@SP
M=M+1
@this
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@that
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@argument
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@local
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
M=M+1
//PUSHING: constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@SP
A=M-1
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci4)
//BINARY OP:add
@SP
AM=M-1
D=M
A=A-1
M=M+D
@LCL
D=M
@R14
M=D
@5
D=D-A
A=D
D=M
@R15
M=D
//POPPING: argument 0
@0
D=A
@ARG
A=M+D
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
M=M-1
A=M
D=M
@this
M=D
@R14
M=M-1
A=M
D=M
@that
M=D
@R14
M=M-1
A=M
D=M
@argument
M=D
@R14
M=M-1
A=M
D=M
@local
M=D
@R15
A=M
0;JMP
@13
M=0
@14
M=0
@15
M=0
(Sys.init)
//PUSHING: constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
@Main.fibonacci5
D=A
@SP
A=M
M=D
@SP
M=M+1
@this
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@that
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@argument
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@local
D=M
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
M=M+1
//PUSHING: constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//BINARY OP:sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
@SP
A=M-1
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci5)
(WHILE)
@WHILE
0;JMP
