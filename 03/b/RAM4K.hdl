// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
	//	this section consists of 8 components of RAM512. 
	//	address[0] to address[8] are all passed to RAM512 for it's own address management,
	//	the most significant 3-bits of the address are passed to the DMux8Way and the Mux8Way16 for the selection of the wanted RAM512.
	RAM512(in=in,load=inreg1,address=address[0..8],out=outreg1);
	RAM512(in=in,load=inreg2,address=address[0..8],out=outreg2);
	RAM512(in=in,load=inreg3,address=address[0..8],out=outreg3);
	RAM512(in=in,load=inreg4,address=address[0..8],out=outreg4);
	RAM512(in=in,load=inreg5,address=address[0..8],out=outreg5);
	RAM512(in=in,load=inreg6,address=address[0..8],out=outreg6);
	RAM512(in=in,load=inreg7,address=address[0..8],out=outreg7);
	RAM512(in=in,load=inreg0,address=address[0..8],out=outreg0);
	
	//	Choosing the RAM512 that we want to write to
    DMux8Way(in=load,sel=address[9..11],a=inreg0,b=inreg1,c=inreg2,d=inreg3,e=inreg4,f=inreg5,g=inreg6,h=inreg7);
	
	//	Choosing the RAM512 that we want to read from
	Mux8Way16(a=outreg0,b=outreg1,c=outreg2,d=outreg3,e=outreg4,f=outreg5,g=outreg6,h=outreg7,sel=address[9..11],out=out);
}